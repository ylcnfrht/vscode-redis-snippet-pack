{
  "geoadd": {
    "prefix": "redis.geoadd",
    "body": [
      "// geoadd: Add one or more geospatial items in the geospatial index represented using a sorted set",
      "",
      "client.geoadd('Sicily', 13.361389, 38.115556, 'Palermo', 15.087269, 37.502669, 'Catania', function (err, res) {",
      "\tconsole.log(res);",
      "});"
    ],
    "description": "redis geoadd command"
  },
  "geodist": {
    "prefix": "redis.geodist",
    "body": [
      "// geodist: Returns the distance between two members of a geospatial index",
      "",
      "client.geodist('Sicily', 'Palermo', 'Catania', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis geodist command"
  },
  "georadius": {
    "prefix": "redis.georadius",
    "body": [
      "// georadius: Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a point",
      "",
      "client.georadius('Sicily', 15, 37, 100, 'km', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis georadius command"
  },
  "geohash": {
    "prefix": "redis.geohash",
    "body": [
      "// geohash: Returns members of a geospatial index as standard geohash strings",
      "",
      "client.geohash('Sicily', 'Palermo', 'Catania', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis geohash command"
  },
  "geopos": {
    "prefix": "redis.geopos",
    "body": [
      "// geopos: Returns longitude and latitude of members of a geospatial index",
      "",
      "client.geopos('Sicily', 'Palermo', 'Catania', 'NonExisting', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis geopos command"
  },
  "georadiusbymember": {
    "prefix": "redis.georadiusbymember",
    "body": [
      "// georadiusbymember: Query a sorted set representing a geospatial index to fetch members matching a given maximum distance from a member",
      "",
      "client.georadiusbymember('Sicily', 'Agrigento', 100, 'km', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis georadiusbymember command"
  },
  "hdel": {
    "prefix": "redis.hdel",
    "body": [
      "// hdel: Delete one or more hash fields",
      "",
      "client.hdel('myhash', 'field1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hdel command"
  },
  "hexists": {
    "prefix": "redis.hexists",
    "body": [
      "// hexists: Determine if a hash field exists",
      "",
      "client.hexists('myhash', 'field1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hexists command"
  },
  "hget": {
    "prefix": "redis.hget",
    "body": [
      "// hget: Get the value of a hash field",
      "",
      "client.hget('myhash', 'field1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hget command"
  },
  "hgetall": {
    "prefix": "redis.hgetall",
    "body": [
      "// hgetall: Get all the fields and values in a hash",
      "",
      "client.hgetall('myhash', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hgetall command"
  },
  "hincrby": {
    "prefix": "redis.hincrby",
    "body": [
      "// hincrby: Increment the integer value of a hash field by the given number",
      "",
      "client.hincrby('myhash', 'field', 1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hincrby command"
  },
  "hincrbyfloat": {
    "prefix": "redis.hincrbyfloat",
    "body": [
      "// hincrbyfloat: Increment the float value of a hash field by the given amount",
      "",
      "client.hincrbyfloat('mykey', 'field', 0.1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hincrbyfloat command"
  },
  "hkeys": {
    "prefix": "redis.hkeys",
    "body": [
      "// hkeys: Get all the fields in a hash",
      "",
      "client.hkeys('myhash', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hkeys command"
  },
  "hlen": {
    "prefix": "redis.hlen",
    "body": [
      "// hlen: Get the number of fields in a hash",
      "",
      "client.hlen('myhash', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hlen command"
  },
  "hmget": {
    "prefix": "redis.hmget",
    "body": [
      "// hmget: Get the values of all the given hash fields",
      "",
      "client.hmget('myhash','field1','field2','nofield', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hmget command"
  },
  "hmset": {
    "prefix": "redis.hmset",
    "body": [
      "// hmset: Set multiple hash fields to multiple values",
      "",
      "client.hmset('myhash', 'field1', 'Hello','field2', 'World', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hmset command"
  },
  "hscan": {
    "prefix": "redis.hscan",
    "body": [
      "// hscan: Incrementally iterate hash fields and associated values",
      "",
      "client.hscan('hash', 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hscan command"
  },
  "hset": {
    "prefix": "redis.hset",
    "body": [
      "// hset: Set the string value of a hash field",
      "",
      "client.hset('myhash', 'field1', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hset command"
  },
  "hsetnx": {
    "prefix": "redis.hsetnx",
    "body": [
      "// hsetnx: Set the value of a hash field, only if the field does not exist",
      "",
      "client.hsetnx('myhash', 'field', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hsetnx command"
  },
  "hstrlen": {
    "prefix": "redis.hstrlen",
    "body": [
      "// hstrlen: Get the length of the value of a hash field",
      "",
      "client.hstrlen('myhash', 'f1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hstrlen command"
  },
  "hvals": {
    "prefix": "redis.hvals",
    "body": [
      "// hvals: Get all the values in a hash",
      "",
      "client.hvals('myhash', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis hvals command"
  },
  "pfadd": {
    "prefix": "redis.pfadd",
    "body": [
      "// pfadd: Adds the specified elements to the specified HyperLogLog.",
      "",
      "client.pfadd('hll', 'a', 'b', 'c', 'd', 'e', 'f', 'g', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pfadd command"
  },
  "pfcount": {
    "prefix": "redis.pfcount",
    "body": [
      "// pfcount: Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).",
      "",
      "client.pfcount('hll', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pfcount command"
  },
  "pfmerge": {
    "prefix": "redis.pfmerge",
    "body": [
      "// pfmerge: Merge N different HyperLogLogs into a single one.",
      "",
      "client.pfmerge('hll3', 'hll1', 'hll2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pfmerge command"
  },
  "del": {
    "prefix": "redis.del",
    "body": [
      "// del: Delete a key",
      "",
      "client.del('key1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis del command"
  },
  "dump": {
    "prefix": "redis.dump",
    "body": [
      "// dump: Return a serialized version of the value stored at the specified key.",
      "",
      "client.dump('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis dump command"
  },
  "exists": {
    "prefix": "redis.exists",
    "body": [
      "// exists: Determine if a key exists",
      "",
      "client.exists('key1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis exists command"
  },
  "expire": {
    "prefix": "redis.expire",
    "body": [
      "// expire: Set a key's time to live in seconds",
      "",
      "client.expire('mykey', 10, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis expire command"
  },
  "expireat": {
    "prefix": "redis.expireat",
    "body": [
      "// expireat: Set the expiration for a key as a UNIX timestamp",
      "",
      "client.expireat('mykey', 1293840000, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis expireat command"
  },
  "keys": {
    "prefix": "redis.keys",
    "body": [
      "// keys: Find all keys matching the given pattern",
      "",
      "client.keys('*', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis keys command"
  },
  "move": {
    "prefix": "redis.move",
    "body": [
      "// move: Move a key to another database",
      "",
      "client.move('key1', '1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis move command"
  },
  "object": {
    "prefix": "redis.object",
    "body": [
      "// object: Inspect the internals of Redis objects",
      "",
      "client.object('encoding' ,'foo', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis object command"
  },
  "persist": {
    "prefix": "redis.persist",
    "body": [
      "// persist: Remove the expiration from a key",
      "",
      "client.persist('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis persist command"
  },
  "pexpire": {
    "prefix": "redis.pexpire",
    "body": [
      "// pexpire: Set a key's time to live in milliseconds",
      "",
      "client.pexpire('mykey', 1500, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pexpire command"
  },
  "pexpireat": {
    "prefix": "redis.pexpireat",
    "body": [
      "// pexpireat: Set the expiration for a key as a UNIX timestamp specified in milliseconds",
      "",
      "client.pexpireat('mykey', 1555555555005, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pexpireat command"
  },
  "pttl": {
    "prefix": "redis.pttl",
    "body": [
      "// pttl: Get the time to live for a key in milliseconds",
      "",
      "client.pttl('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis pttl command"
  },
  "randomkey": {
    "prefix": "redis.randomkey",
    "body": [
      "// randomkey: Return a random key from the keyspace",
      "",
      "client.randomkey( function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis randomkey command"
  },
  "rename": {
    "prefix": "redis.rename",
    "body": [
      "// rename: Rename a key",
      "",
      "client.rename('mykey', 'myotherkey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis rename command"
  },
  "renamenx": {
    "prefix": "redis.renamenx",
    "body": [
      "// renamenx: Rename a key, only if the new key does not exist",
      "",
      "client.renamenx('mykey', 'myotherkey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis renamenx command"
  },
  "scan": {
    "prefix": "redis.scan",
    "body": [
      "// scan: Incrementally iterate the keys space",
      "",
      "client.scan(0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis scan command"
  },
  "sort": {
    "prefix": "redis.sort",
    "body": [
      "// sort: Sort the elements in a list, set or sorted set",
      "",
      "client.sort('mylist', 'ALPHA', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sort command"
  },
  "touch": {
    "prefix": "redis.touch",
    "body": [
      "// touch: Alters the last access time of a key(s). Returns the number of existing keys specified.",
      "",
      "client.touch('key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis touch command"
  },
  "ttl": {
    "prefix": "redis.ttl",
    "body": [
      "// ttl: Get the time to live for a key",
      "",
      "client.ttl('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis ttl command"
  },
  "type": {
    "prefix": "redis.type",
    "body": [
      "// type: Determine the type stored at key",
      "",
      "client.type('key1', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis type command"
  },
  "wait": {
    "prefix": "redis.wait",
    "body": [
      "// wait: Wait for the synchronous replication of all the write commands sent in the context of the current connection",
      "",
      "client.wait(1, 5000, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis wait command"
  },
  "blpop": {
    "prefix": "redis.blpop",
    "body": [
      "// blpop: Remove and get the first element in a list, or block until one is available",
      "",
      "client.blpop('list1', 'list2', 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis blpop command"
  },
  "brpop": {
    "prefix": "redis.brpop",
    "body": [
      "// brpop: Remove and get the last element in a list, or block until one is available",
      "",
      "client.brpop('list1', 'list2', 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis brpop command"
  },
  "lindex": {
    "prefix": "redis.lindex",
    "body": [
      "// lindex: Get an element from a list by its index",
      "",
      "client.lindex('mylist', 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lindex command"
  },
  "linsert": {
    "prefix": "redis.linsert",
    "body": [
      "// linsert: Insert an element before or after another element in a list",
      "",
      "client.linsert('mylist', 'before', 'World', 'There', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis linsert command"
  },
  "llen": {
    "prefix": "redis.llen",
    "body": [
      "// llen: Get the length of a list",
      "",
      "client.llen('mylist', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis llen command"
  },
  "lpop": {
    "prefix": "redis.lpop",
    "body": [
      "// lpop: Remove and get the first element in a list",
      "",
      "client.lpop('mylist', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lpop command"
  },
  "lrange": {
    "prefix": "redis.lrange",
    "body": [
      "// lpush: Prepend one or multiple values to a list",
      "",
      "client.lrange('mylist', 0, -1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lrange command"
  },
  "lpushx": {
    "prefix": "redis.lpushx",
    "body": [
      "// lpushx: Prepend a value to a list, only if the list exists",
      "",
      "client.lpushx('mylist', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lpushx command"
  },
  "lrange": {
    "prefix": "redis.lrange",
    "body": [
      "// lrange: Get a range of elements from a list",
      "",
      "client.lrange('mylist', -100, 100, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lrange command"
  },
  "lrem": {
    "prefix": "redis.lrem",
    "body": [
      "// lrem: Remove elements from a list",
      "",
      "client.lrem('mylist', -2, 'hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lrem command"
  },
  "lset": {
    "prefix": "redis.lset",
    "body": [
      "// lset: Set the value of an element in a list by its index",
      "",
      "client.lset('mylist', 0, 'four', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis lset command"
  },
  "ltrim": {
    "prefix": "redis.ltrim",
    "body": [
      "// ltrim: Trim a list to the specified range",
      "",
      "client.ltrim('mylist', 1, -1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis ltrim command"
  },
  "rpop": {
    "prefix": "redis.rpop",
    "body": [
      "// rpop: Remove and get the last element in a list",
      "",
      "client.rpop('mylist', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis rpop command"
  },
  "rpoplpush": {
    "prefix": "redis.rpoplpush",
    "body": [
      "// rpoplpush: Remove the last element in a list, prepend it to another list and return it",
      "",
      "client.rpoplpush('mylist', 'myotherlist', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis rpoplpush command"
  },
  "rpush": {
    "prefix": "redis.rpush",
    "body": [
      "// rpush: Append one or multiple values to a list",
      "",
      "client.rpush('mylist', 'hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis rpush command"
  },
  "rpushx": {
    "prefix": "redis.rpushx",
    "body": [
      "// rpushx: Append a value to a list, only if the list exists",
      "",
      "client.rpushx('mylist', 'world', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis rpushx command"
  },
  "sadd": {
    "prefix": "redis.sadd",
    "body": [
      "// sadd: Add one or more members to a set",
      "",
      "client.sadd('mykey', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sadd command"
  },
  "scard": {
    "prefix": "redis.scard",
    "body": [
      "// scard: Get the number of members in a set",
      "",
      "client.scard('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis scard command"
  },
  "sdiff": {
    "prefix": "redis.sdiff",
    "body": [
      "// sdiff: Subtract multiple sets",
      "",
      "client.sdiff('key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sdiff command"
  },
  "sdiffstore": {
    "prefix": "redis.sdiffstore",
    "body": [
      "// sdiffstore: Subtract multiple sets and store the resulting set in a key",
      "",
      "client.sdiffstore('key', 'key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sdiffstore command"
  },
  "sinter": {
    "prefix": "redis.sinter",
    "body": [
      "// sinter: Intersect multiple sets",
      "",
      "client.sinter('key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sinter command"
  },
  "sinterstore": {
    "prefix": "redis.sinterstore",
    "body": [
      "// sinterstore: Intersect multiple sets and store the resulting set in a key",
      "",
      "client.sinterstore('key', 'key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sinterstore command"
  },
  "sismember": {
    "prefix": "redis.sismember",
    "body": [
      "// sismember: Determine if a given value is a member of a set",
      "",
      "client.sismember('myset', 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sismember command"
  },
  "smembers": {
    "prefix": "redis.smembers",
    "body": [
      "// smembers: Get all the members in a set",
      "",
      "client.smembers('myset', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis smembers command"
  },
  "smove": {
    "prefix": "redis.smove",
    "body": [
      "// smove: Move a member from one set to another",
      "",
      "client.smove('myset', 'myotherset', 'two', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis smove command"
  },
  "spop": {
    "prefix": "redis.spop",
    "body": [
      "// spop: Remove and return one or multiple random members from a set",
      "",
      "client.spop('myset', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis spop command"
  },
  "srandmember": {
    "prefix": "redis.spop",
    "body": [
      "// srandmember: Get one or multiple random members from a set",
      "",
      "client.srandmember('myset', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis srandmember command"
  },
  "srem": {
    "prefix": "redis.srem",
    "body": [
      "// srem: Remove one or more members from a set",
      "",
      "client.srem('myset', 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis srem command"
  },
  "sscan": {
    "prefix": "redis.sscan",
    "body": [
      "// sscan: Incrementally iterate Set elements",
      "",
      "client.sscan('myset', 0, 'match', 'f*', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sscan command"
  },
  "sunion": {
    "prefix": "redis.sunion",
    "body": [
      "// sunion: Add multiple sets",
      "",
      "client.sunion('key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sunion command"
  },
  "sunionstore": {
    "prefix": "redis.sunionstore",
    "body": [
      "// sunionstore: Add multiple sets and store the resulting set in a key",
      "",
      "client.sunionstore('key', 'key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis sunionstore command"
  },
  "zadd": {
    "prefix": "redis.zadd",
    "body": [
      "// zadd: Add one or more members to a sorted set, or update its score if it already exists",
      "",
      "client.zadd('myzset', 1, 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zadd command"
  },
  "zcard": {
    "prefix": "redis.zcard",
    "body": [
      "// zcard: Get the number of members in a sorted set",
      "",
      "client.zcard('myzset', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zcard command"
  },
  "zcount": {
    "prefix": "redis.zcount",
    "body": [
      "// zcount: Count the members in a sorted set with scores within the given values",
      "",
      "client.zcount('myzset', 1, 3, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zcount command"
  },
  "zincrby": {
    "prefix": "redis.zincrby",
    "body": [
      "// zincrby: Increment the score of a member in a sorted set",
      "",
      "client.zincrby('myzset', 2, 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zincrby command"
  },
  "zinterstore": {
    "prefix": "redis.zinterstore",
    "body": [
      "// zinterstore: Intersect multiple sorted sets and store the resulting sorted set in a new key",
      "",
      "client.zinterstore('out', 2, 'zset1', 'zset2', 'WEIGHTS', 2, 3, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zinterstore command"
  },
  "zlexcount": {
    "prefix": "redis.zlexcount",
    "body": [
      "// zlexcount: Count the number of members in a sorted set between a given lexicographical range",
      "",
      "client.zlexcount('myzset', '-', '+', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zlexcount command"
  },
  "zrange": {
    "prefix": "redis.zrange",
    "body": [
      "// zrange: Return a range of members in a sorted set, by index",
      "",
      "client.zrange('myzset', 0, -1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrange command"
  },
  "zrangebylex": {
    "prefix": "redis.zrangebylex",
    "body": [
      "// zrange: Return a range of members in a sorted set, by lexicographical range",
      "",
      "client.zrangebylex('myzset', '-', '[c', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrangebylex command"
  },
  "zrangebyscore": {
    "prefix": "redis.zrangebyscore",
    "body": [
      "// zrangebyscore: Return a range of members in a sorted set, by score",
      "",
      "client.zrangebyscore('myzset', 1, 2, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrangebyscore command"
  },
  "zrank": {
    "prefix": "redis.zrank",
    "body": [
      "// zrank: Determine the index of a member in a sorted set",
      "",
      "client.zrank('myzset', 'three', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrank command"
  },
  "zrem": {
    "prefix": "redis.zrem",
    "body": [
      "// zrem: Remove one or more members from a sorted set",
      "",
      "client.zrem('myzset', 'two', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrem command"
  },
  "zrange": {
    "prefix": "redis.zrange",
    "body": [
      "// zremrangebylex: Remove all members in a sorted set between the given lexicographical range",
      "",
      "client.zrange('myzset', 0, -1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrange command"
  },
  "zremrangebyrank": {
    "prefix": "redis.zremrangebyrank",
    "body": [
      "// zremrangebyrank: Remove all members in a sorted set within the given indexes",
      "",
      "lient.zremrangebyrank('myzset', 0,1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zremrangebyrank command"
  },
  "zremrangebyscore": {
    "prefix": "redis.zremrangebyscore",
    "body": [
      "// zremrangebyscore: Remove all members in a sorted set within the given scores",
      "",
      "client.zremrangebyscore('myzset', '-inf' ,'(2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zremrangebyscore command"
  },
  "zrevrange": {
    "prefix": "redis.zrevrange",
    "body": [
      "// zrevrange: Return a range of members in a sorted set, by index, with scores ordered from high to low",
      "",
      "client.zrevrange('myzset', 0, -1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrevrange command"
  },
  "zrevrangebylex": {
    "prefix": "redis.zrevrangebylex",
    "body": [
      "// zrevrangebylex: Return a range of members in a sorted set, by lexicographical range, ordered from higher to lower strings.",
      "",
      "client.zrevrangebylex('myzset', '[c', '-', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrevrangebylex command"
  },
  "zrevrangebyscore": {
    "prefix": "redis.zrevrangebyscore",
    "body": [
      "// zrevrangebyscore: Return a range of members in a sorted set, by score",
      "",
      "client.zrevrangebyscore('myzset', 2, 1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrevrangebyscore command"
  },
  "zrevrank": {
    "prefix": "redis.zrevrank",
    "body": [
      "// zrevrank: Determine the index of a member in a sorted set, with scores ordered from high to low",
      "",
      "client.zrevrank('myzset', 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zrevrank command"
  },
  "zscore": {
    "prefix": "redis.zscore",
    "body": [
      "// zscore: Get the score associated with the given member in a sorted set",
      "",
      "client.zscore('myzset', 'one', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zscore command"
  },
  "zunionstore": {
    "prefix": "redis.zunionstore",
    "body": [
      "// zunionstore: Add multiple sorted sets and store the resulting sorted set in a new key",
      "",
      "client.zunionstore('out', 2, 'zset1', 'zset2', 'WEIGHTS', 2, 3, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis zunionstore command"
  },
  "append": {
    "prefix": "redis.append",
    "body": [
      "// append: Append a value to a key",
      "",
      "client.append('mykey', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis append command"
  },
  "bitcount": {
    "prefix": "redis.bitcount",
    "body": [
      "// bitcount: Count set bits in a string",
      "",
      "client.bitcount('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis bitcount command"
  },
  "bitop": {
    "prefix": "redis.bitop",
    "body": [
      "// bitop: Perform bitwise operations between strings",
      "",
      "client.bitop('AND', 'dest', 'key1', 'key2', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis bitop command"
  },
  "bitpos": {
    "prefix": "redis.bitpos",
    "body": [
      "// bitpos: Find first bit set or clear in a string",
      "",
      "client.bitpos('mykey', 1, 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis bitpos command"
  },
  "on": {
    "prefix": "redis.on",
    "body": [
      "// on: Connect to redis database",
      "",
      "client.on('connect', function() {",
        "\tconsole.log('connected');" ,
      "});"
    ],
    "description": "redis on command"
  },
  "decr": {
    "prefix": "redis.decr",
    "body": [
      "// decr: Decrement the integer value of a key by one",
      "",
      "client.decr('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis decr command"
  },
  "decrby": {
    "prefix": "redis.decrby",
    "body": [
      "// decrby: Decrement the integer value of a key by the given number",
      "",
      "client.decrby('mykey', 3, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis decrby command"
  },
  "get": {
    "prefix": "redis.get",
    "body": [
      "// get: Get the value of a key",
      "",
      "client.get('mykey', function(err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis get command"
  },
  "getbit": {
    "prefix": "redis.getbit",
    "body": [
      "// getbit: Returns the bit value at offset in the string value stored at key",
      "",
      "client.getbit('mykey', 0, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis getbit command"
  },
  "getrange": {
    "prefix": "redis.getrange",
    "body": [
      "// getrange: Get a substring of the string stored at a key",
      "",
      "client.getrange('mykey', 0, 3, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis getrange command"
  },
  "getset": {
    "prefix": "redis.getset",
    "body": [
      "// getset: Set the string value of a key and return its old value",
      "",
      "client.getset('mycounter', '0', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis getset command"
  },
  "incr": {
    "prefix": "redis.incr",
    "body": [
      "// incr: Increment the integer value of a key by one",
      "",
      "client.incr('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis incr command"
  },
  "incrby": {
    "prefix": "redis.incrby",
    "body": [
      "// incrby: Increment the integer value of a key by the given amount",
      "",
      "client.incrby('mykey', 5, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis incrby command"
  },
  "incrbyfloat": {
    "prefix": "redis.incrbyfloat",
    "body": [
      "// incrbyfloat: Increment the float value of a key by the given amount",
      "",
      "client.incrbyfloat('mykey', 0.1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis incrbyfloat command"
  },
  "mget": {
    "prefix": "redis.mget",
    "body": [
      "// mget: Get the values of all the given keys",
      "",
      "client.mget('key1', 'key2', 'nonexisting', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis mget command"
  },
  "mset": {
    "prefix": "redis.mset",
    "body": [
      "// mset: Set multiple keys to multiple values",
      "",
      "client.mset('key1', 'Hello', 'key2', 'World', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis mset command"
  },
  "psetex": {
    "prefix": "redis.psetex",
    "body": [
      "// psetex: Set the value and expiration in milliseconds of a key",
      "",
      "client.psetex('mykey', 1000, 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis psetex command"
  },
  "set": {
    "prefix": "redis.set",
    "body": [
      "// set: Set the string value of a key",
      "",
      "client.set('mykey', 'Hello', function(err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis set command"
  },
  "setbit": {
    "prefix": "redis.setbit",
    "body": [
      "// setbit: Sets or clears the bit at offset in the string value stored at key",
      "",
      "client.setbit('mykey', 7, 1, function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis setbit command"
  },
  "setex": {
    "prefix": "redis.setex",
    "body": [
      "// setex: Set the value and expiration of a key",
      "",
      "client.setex('mykey', 10, 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis setex command"
  },
  "setnx": {
    "prefix": "redis.setnx",
    "body": [
      "// setnx: Set the value of a key, only if the key does not exist",
      "",
      "client.setnx('mykey', 'Hello', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis setnx command"
  },
  "setrange": {
    "prefix": "redis.setrange",
    "body": [
      "// setrange: Overwrite part of a string at key starting at the specified offset",
      "",
      "client.setrange('key1', 6, 'Redis', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis setrange command"
  },
  "strlen": {
    "prefix": "redis.strlen",
    "body": [
      "// strlen: Get the length of the value stored in a key",
      "",
      "client.strlen('mykey', function (err, res) {",
        "\tconsole.log(res);" ,
      "});"
    ],
    "description": "redis strlen command"
  }
}
